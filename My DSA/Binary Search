            1508

class Solution {
public:

    int mod = 1e9 + 7;

    pair<int, int> checkHavingSubarray(vector<int> &arr, int n, int givenSum){
        int low = 0, high = 0, windowSum = 0, countSubArray = 0, totalSum = 0, runningSum = 0;
        while(high < n){
            windowSum += arr[high];
            runningSum += 1LL * (high - low + 1) * arr[high];
            while(windowSum > givenSum){
                runningSum -= windowSum;
                windowSum -= arr[low];
                low++;
            }
            totalSum = (totalSum + runningSum) % mod;
            countSubArray += (high - low + 1);
            high++;
        }
        return {totalSum, countSubArray};
    }

    int binarySearch(vector<int> &arr, int n, int subArrayNeed){
        int low = 1e9 + 7, high;
        for(auto it : arr){
            if(it < low){
                low = it;
            }
            high += it;
        }
        while(low <= high){
            int mid = (low + high) >> 1;
            if(checkHavingSubarray(arr, n, mid).second < subArrayNeed){
                low = mid + 1; // ans
            }else{
                high = mid - 1;
            }
        }
        auto ans = checkHavingSubarray(arr, n, low);
        int totalSum = ans.first;
        int totalSubArray = ans.second;
        return (totalSum - low * (totalSubArray - subArrayNeed)) % mod;
    }

    int rangeSum(vector<int>& arr, int n, int left, int right) {
        return binarySearch(arr, n, right) - binarySearch(arr, n, left - 1);
    }
};

-----------------------------------------------------------------------------------------------

                                    719. Find K-th Smallest Pair Distance

class Solution {
public:

    bool check(int mid, vector<int> &arr, int k){
        int countOfPair = 0, n = arr.size();
        int j = 1;
        for(int i = 0; i < n; i++){
            while(j < n && arr[j] - arr[i] <= mid){
                j++;
            }
            countOfPair += (j - i - 1);
        }
        return countOfPair >= k;
    }

    int smallestDistancePair(vector<int>& arr, int k) {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        int low = 0, high = arr[n - 1] - arr[0];
        while(low <= high){
            int mid = (low + high) >> 1;
            if(check(mid, arr, k)){
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return low;
    }
};
