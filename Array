In int main array can be declare maximum to 1e6

but in globally array can be declare maximum to 1e7

-----------------------------------------------------------------------------------------

Largest Element in Array

--------Brute nlogn

class Solution
{
public:
    int largest(vector<int> &arr, int n)
    {
        sort(arr.begin(), arr.end());
        return arr[n - 1];
    }
};

---------Optimal only N

class Solution
{
public:
    int largest(vector<int> &arr, int n)
    {
        int maxi = arr[0];
        
        for(int i = 1; i < n; i++){
            
            if(arr[i] > maxi){
                
                maxi = arr[i];
                
            }
        }
        
        return maxi;
    }
};

-----------------------------------------------------------------------------------------

second largest 

-------------brute nlogn

sort and print arr[n - 2]

---------------better 2*n

class Solution{
public:	

	int print2largest(int arr[], int n) {

        int mx = arr[0];
        
        for(int i = 1; i <= n - 1; i++){
            
            if(arr[i] > mx){
                
                mx = arr[i];
            }
        }
        
        int second_mx = -1;
        
        for(int i = 0; i <= n - 1; i++){
            
            if(arr[i] > second_mx && arr[i] != mx){
                
                second_mx = arr[i];
                
            }
        }
        
        return second_mx;
        
	}
};

--------optimal only N

class Solution{
public:	

	int print2largest(int arr[], int n) {

        int mx = arr[0], second_mx = -1;
        
        for(int i = 1; i <= n - 1; i++){
            
            if(arr[i] > mx){
                
                second_mx = mx;
                mx = arr[i];
                
            }
            
            if(arr[i] < mx){
                
                if(arr[i] > second_mx){
                    
                    second_mx = arr[i];
                    
                }
            }
                
        }
        
        return second_mx;
        
	}
};

same as second mininimum

-----------------------------------------------------------------------------------------

check array is sorted or not

---- optimal N

class Solution {
  public:
    bool arraySortedOrNot(int arr[], int n) {
        
        for(int i = 1; i <= n - 1; i++){
            
            if(arr[i - 1] > arr[i]){
                
                return false;
                
            }
        }
        
        return true;
        
    }
};

-----------------------------------------------------------------------------------------

check rotated array is sorted or not

-------Optimal N

class Solution {
public:
    bool check(vector<int>& arr) {
        
        int n = arr.size();

        int cnt = 0;

        for(int i = 0; i < n; i++){

            if(arr[i] > arr[(i + 1) % n] && ++cnt > 1){
                return false;
            }
        }

        return true;

    }
};


-----------------------------------------------------------------------------------------

remove duplicate from the array

-------------- brute O(n * logn + ms.size())

class Solution {
public:
    int removeDuplicates(vector<int>& arr) {
        
        int n = arr.size();

        if(n == 1){

            return 1;

        }

        set<int> ms;

        for(auto it : arr){

            ms.insert(it);

        }

        int idx = 0;

        for(auto it : ms){

            arr[idx] = it;
            idx++;
            
        }

        return (int)ms.size();

    }
};

-----------------optimmal

class Solution {
public:
    int removeDuplicates(vector<int>& arr) {
        
        int n = arr.size();

        if(n == 1){

            return 1;

        }

        int slow = 0, fast = 0;

        while(fast < n){

            if(arr[slow] == arr[fast]){

                fast++;

            }else{

                slow++;
                arr[slow] = arr[fast];
                fast++;

            }
        }

        return slow + 1;

    }
};


-----------------------------------------------------------------------------------------

Left rotate by one elememt

#include <bits/stdc++.h> 
vector<int> rotateArray(vector<int>& arr, int n) {

    int temp = arr[0];

    for(int i = 1; i <= n - 1; i++){

        arr[i - 1] = arr[i];

    }

    arr[n - 1] = temp;

    return arr;

}

-----------------------------------------------------------------------------------------

left rotate by D element

brute force----------------

k = k % n;

    vector<int> store;

    for(int i = 0; i < k; i++){
        store.push_back(arr[i]);
    }

    for(int i = k; i < n; i++){

        arr[i - k] = arr[i];

    }

    for(int i = n - k; i < n; i++){

        arr[i] = store[i - (n - k)];

    }

    for(auto it : arr){

        cout << it << " ";
    }

----------optimal


reverse(arr.begin(), arr.begin() + k);

    reverse(arr.begin() + k, arr.end());

    reverse(arr.begin(), arr.end());


-----------------------------------------------------------------------------------------

right rotate by D element

-------------brute force

class Solution {
public:
    void rotate(vector<int>& arr, int k) {

        int n = arr.size();

        k = k % n;

        vector<int> temp;

        for(int i = n - k; i < n; i++){

            temp.push_back(arr[i]);
        }

        for(int i = n - k - 1; i >= 0; i--){

            arr[i + k] = arr[i];

        }

        for(int i = 0; i < k; i++){

            arr[i] = temp[i];
        }
    }
};

----------optimal

reverse(arr.begin(), arr.begin() + n - k);

        reverse(arr.begin() + n - k, arr.end());

        reverse(arr.begin(), arr.end());

also use revese func(low < high) make swap and low++, high--

-----------------------------------------------------------------------------------------

move all zero to the end

-------brute force

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        vector<int> temp;

        int n = nums.size();

        for(int i = 0; i < nums.size(); i++){

            if(nums[i] != 0){

                temp.push_back(i);
            }
        }

        for(int i =0; i < temp.size(); i++){

            nums[i] = nums[temp[i]];

        }

        for(int i = temp.size(); i < n; i++){
            nums[i] = 0;
        }

    }
};

----------optimal O(X) + O(N - X)

class Solution {
public:
    void moveZeroes(vector<int>& arr) {
        
        int n = arr.size();

        int low = -1;

        for(int i = 0; i < n; i++){
            if(arr[i] == 0){
                low = i;
                break;
            }
        }

        if(low == -1){
            return;
        }

        int high = low + 1;

        while(high < n){

            if(arr[high]){

                swap(arr[low], arr[high]);
                low++;
                high++;

            }else{

                high++;

            }
        }

    }
};


-----------------------------------------------------------------------------------------

find union of array

-----------brute force is insert into a set and print

------------optimal time O(N  +  M)

class Solution{
    public:
    
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        
        int i = 0, j = 0;
        
        vector<int> ans;
        
        while(i < n && j < m){
            
            if(arr1[i] <= arr2[j]){
                
                if(ans.empty() || ans.back() != arr1[i]){
                    
                    ans.push_back(arr1[i]);
                    
                }
                
                i++;
                
            }else{
                
                if(ans.empty() || ans.back() != arr2[j]){
                    
                    ans.push_back(arr2[j]);
                    
                }
                
                j++;
                
            }
        }
        
        while(i < n){
            
            if(ans.empty() || ans.back() != arr1[i]){
                ans.push_back(arr1[i]);
            }
            
            i++;
            
        }
        
        while(j < m){
            
            if(ans.empty() || ans.back() != arr2[j]){
                
                ans.push_back(arr2[j]);
                
            }
            
            j++;
        }
        
        return ans;
    }
};


-----------------------------------------------------------------------------------------

intersection of two sorted arr

-----------brute force

vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	
	vector<bool> visited(m, false);

	vector<int> ans;

	for(int i = 0; i < arr1.size(); i++){

		for(int j = 0; j < arr2.size(); j++){

			if(arr1[i] == arr2[j] && visited[j] == false){

				visited[j] = true;
				ans.push_back(arr1[i]);
				break;

			}

			if(arr2[j] > arr1[i]){
				break;
			}
		}
	}

	return ans;
}

------------------also use hash

--------------------optimal time --> O(n + m) space --> O(1)

vector<int> findArrayIntersection(vector<int> &a, int n, vector<int> &b, int m)
{
	
	vector<int> ans;

	int i = 0, j = 0;

	while(i < n && j < m){

		if(a[i] == b[j]){
			ans.push_back(a[i]);
			i++;
			j++;
		}else if(a[i] < b[j]){
			i++;
		}else{
			j++;
		}

	}

	return ans;

}

-----------------------------------------------------------------------------------------

first missing number 

-----------brute force  

iterater throught 1 to N 
	iterater through arr and see is their or not
if(yes) check for next
return number;

------------better

class Solution {
public:
    int missingNumber(vector<int>& arr) {
        
        int n = arr.size();

        unordered_map<int, bool> hash;

        for(int i = 0; i < n; i++){

            hash[arr[i]] = true;

        }

        for(int i = 0; i <= n; i++){

            if(!hash[i]){
                return i;
            }
        }

        return 0;

    }
};

----------------optimal -- sum

class Solution {
public:
    int missingNumber(vector<int>& arr) {
        
        int n = arr.size();

        int sum = n * (n + 1) >> 1;

        for(auto it : arr){

            sum -= it;

        }

        return sum;

    }
};

---------------- optimal xor

class Solution {
public:
    int missingNumber(vector<int>& arr) {
        
        int n = arr.size();

        int xor1 = 0;

        for(auto it : arr){
            xor1 = xor1 ^ it;
        }

        int xor2 = 0;

        for(int i = 1; i <= n; i++){
            xor2 = xor2 ^ i;
        }

        return xor1 ^ xor2;

    }
};

so, here xor is better because n == 1e5 when sum is too large to store in long --> get extra memory use

class Solution {
public:
    int missingNumber(vector<int>& arr) {
        
        int n = arr.size();

        int xor1 = 0;

        for(int i = 0; i < n; i++){

            xor1 = xor1 ^ arr[i];
            xor1 = xor1 ^ (i + 1);

        }

        return xor1;

    }
};

-----------------------------------------------------------------------------------------

Single Number

--------------brute forces run n2 loop

--------------better use hash size of maxi element and increase the counter which gives 1 is answer

use hash map then insert take O(N Log(Map.size)) and map.size == (n >> 1) + 1;
space is map.size

--------------optimal is xor

-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------






