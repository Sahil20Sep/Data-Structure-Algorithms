-----------------------------------------------------------------------

            C++ stl

std:: --> hectic
include all library

-----pair

pair<int, int>
pair<int, pair<int, int>>
pair<int,int> arr[]

----vector

v.push_back
v.emplace_back

vector<int> v(10);
v.push_back(1) --> works, always dynamic in size even you declare the size of the vector.

v[0], v.back(), v.at(0)

vector<int>::itreator it = v.begin();
cout << *it

v.rbegin() --> points to reverse the vector and first element
v.rend() --> points to reverse the vector and lastelement + 1

auto it : v
auto it = v.begin, it != v.end it++

v.erase(v.begin + 1)
v.erase(v.begin + 2, v.begin + 4)

v.insert(v.begin, 100) --> 100, 1, 1
v.insert(v.begin + 1, 2, 10) --> 100, 10, 10, 1, 1

v.insert(v.begin, copy.begin, copy.end); 50, 50, 100, 10, 10, 1,1 

v.size
v.pop_back
v.clear
v1.swap(v2)
v.empty() 

-------deque

dq.front
dq.back

same push and pop

-------stack LIFO

push, pop, top, size, empty

s.swap(t)

-------queue FIFO

push, front, pop, size, empty

q.back --> gives last guy
q.front --> gives first guy
pop --> delete the front

------priority queue (max heap and min heap)

push , pop --> logN
top --> 1

push, top, pop --> maximum at top

priority_queue<int, vector<int> , greater<int>> PQ --> minimum element at top

-----set

sorted, unique

auto it = ms.find(3) --> if not present return ms.end();

st.erase(int) --> erase it LogN

st.count(int) --> either 0 or 1.

auto it = ms.find(3);
ms.erase(it) --> 1 time

auto it = ms.find(2);
auto it = ms.find(5);
ms.erase(it1, it2) --> 2,3,4 will erase

auto it = ms.lower_bound(2)
auto it = ms.upper_bound(2)

everything in logN complexity

-----multiset

sorted, not unique

ms.erase(1) --> all occurace will delted
ms.erase(ms.find(1)) --> erase one occurance only

ms.count(1)

-----unorder_set

random order, but unique element
time complexity --> 1
lower bound and upper bound not work

-----map

key in sorted order and key

for(auto it : map) cout << it.first << " " << it.second << endl;

auto it = map.find(3) --> if not there return it as mp.end();
cout << *it.seconnd;

auto it = map.lower_bound(2)
auto it = map.upper_bound(2)

-----multimap

sorted and duplicated

-----unordered_map

random order and unique

----------------------------------------------------------------------------

                basic algo

-----sort

sort(a, a + n);
sort(a.begin, a.end);
sort(a, a+n, greater<int>);

sort(v.begin, v.end, comp);

bool comp()

----bits

__builtin_popcount(n) --> number of 1's in that number.
__builtin_popcountll(n) --> if number is long long

-----permutation

start from the sorted guy if you want all permutation;
next_permutation(s.begin(), s.end());

-----max min

*max_element

----------------------------------------------------------------------------

    (exxtrack the digit and coutn the digit)

while(n > 0)
n%10  
store.push_back(n%10);
n/10
cnt++;

-------------------------------------------------------------------------------

      reverse a number

low = 0, high = n - 1

temp = arr[low]
arr[low] = arr[high]
arr[high] = temp

-----------------------------------------------------------------------------

palindrome check

low = 0 high n - 1
while Low < high
arr[low] == arr[high] 

else return false

--------------------------------------------------------------------------------------------------------------

    armstrong number

digit cubes sum == n

extract the digit from and number and make cubes sums

---------------------------------------------------------------------------------------------------------------

    print all divisor

brute --

for 1 -> n and check n % i == 0

---better

for 1 -> i * i <= n and check n % i == 0 (i) if(n/i != i) (n/i)

-------------------------------------------------------------------------------------------------------------------

    prime number check

same as above if cnt == 2 then it's prime number.

-----------------------------------------------------------------------------

GCD

---brute force 

tell hime above solution 

store divisonn of a
store division of b

then compare match + greatest --> gcd

-----better

for i = 1 -> min(a, b)

  run above alog
  gcd = largeest number

run the reverse loop --> good better complexity but still worse case is 

------euilidium algo to find gcd

gcd(a, b) = gcd(a - b, b)

52, 10 --> 42, 10 --> 32, 10 --> ... --> 2, 10

gcd(a, b = gcd(a % b, b);

one of them is zero other is gcd

while a > 0 && b > 0
  a > b a = a % b
  b > a b = b % a

a == 0 return b
b == 0 return a

complexity logfi (min(a, b))

base is changing if it is constant then e can write 10, 2 as a base.

----------------------------------------------------------------------------------

  give prime number in the range of 1 to N

---brute 

2 -> N

  Check(i) // is prime number sqrt(N) approch

n * sqrt(N) --> tiime complexity

------------better

prime[n + 1, true]
prime[0] = false;
prime[1] = false;

for(2 -> N)

  if(prime[i] == true
    for(j = 2 * i; j <= n j += i prime[j] false

2 -> n 
  if true --> print

-----optima

for 2 -> i*i <= n
    inside loop
    for j = i * il j <= n; j+= i

N log(logN)

prime harmonic series
space N

---------------------------------------------------------------

    L to R -- count the number 

brute 
for 1 to query size
for L to R
  if(j is prime)
      cnt++;

Q * r-l +1 * sqrt(N)

---better

precomputeation of prime number N loglogN + q * r - l + 1
 
for 1 to q
  for l to r
    if(prime[j] == true) cnt++;

-----------opptimal - prefix sum

precompute the prime array and prefix array

for 1 to q
  l, r
  here handle some case 
  cnt += pref[r] - pre[l -1];

time N loglogN + N + Q
  
-----------------------------------------------------------------------------------------------

                hashing

------brute force

for every integer 
        iterate through arr
            cnt++; // if matches

-----------better

max element array declareed and itreate through array, make increment in hash array.

what ?

1e15? --> not working in array

---for int
inside main for array u can declared only 1e6
global array 1e7

---for bool
inside main for bool 1e7
global 1e8

character hasing is also possible by arr[26];
ch - 'a'

also pick arr[256] --> no need to subtract 
arr[ch]++;

integer hasing in array is not possible for int
character hasing in array is possible always 256 number only

--------

map hashing

space require is less compare to array hashing
sorted order
if not there ==> 0

map --> best, ava, worse --> logN --> time
key is any int, doublee , string, pair<int, int>..

unordered_map --> best, ava --> 1 , wrost --> N is number of element in map
key is only int, double , char , sting

why worse case --N --> internal collision

division method --> 28 --> linklist
folding method
mid square method

all of index is place at the same key  then collision happens.



