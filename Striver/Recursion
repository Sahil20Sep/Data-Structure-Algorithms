            N-Queen

---- with extra loop

class Solution {
public:

    bool isSafe(int row, int col, vector<string> &board, int n){
        int dupRow = row;
        int dupCol = col;
        while(row >= 0 && col >= 0){
            if(board[row][col] == 'Q'){
                return false;
            }
            row--; col--;
        }
        row = dupRow;
        col = dupCol;
        while(col >= 0){
            if(board[row][col] == 'Q'){
                return false;
            }
            col--;
        }
        row = dupRow;
        col = dupCol;
        while(row < n && col >= 0){
            if(board[row][col] == 'Q'){
                return false;
            }
            row++; col--;
        }
        return true;
    }

    void func(int col, vector<string> &board, vector<vector<string>> &ans, int n){
        if(col == n){
            ans.push_back(board);
            return;
        }
        for(int row = 0; row < n; row++){
            if(isSafe(row, col, board, n)){
                board[row][col] = 'Q';
                func(col + 1, board, ans, n);
                board[row][col] = '.';
            }
        }
    }   

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        string s(n, '.');
        vector<string> board(n);
        for(int i = 0; i < n; i++){
            board[i] = s;
        }
        func(0, board, ans, n);
        return ans;
    }
};

----without extra loop

class Solution {
public:

    void func(int c, vector<vector<string>> &ans, vector<string> &v, int n, vector<int> &left, vector<int> &upper, vector<int> &lower){
        if(c == n){
            ans.push_back(v);
            return;
        }
        for(int i = 0; i < n; i++){
            if(left[i] == 0 && upper[n - 1 + (c - i)] == 0 && lower[i + c] == 0){
                v[i][c] = 'Q';
                left[i] = 1; upper[n - 1 + (c - i)] = 1; lower[i + c] = 1;
                func(c + 1, ans, v, n, left, upper, lower);
                v[i][c] = '.';
                left[i] = 0; upper[n - 1 + (c - i)] = 0; lower[i + c] = 0;
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> v(n);
        string s(n, '.');
        for(int i = 0; i < n; i++){
            v[i] = s;
        }
        vector<int> left(n, 0), upper(2 * n - 1, 0), lower(2 * n - 1, 0);
        func(0, ans, v, n, left, upper, lower);
        return ans;
    }
};

-----------------------------------------------------------------------------------------------------

                      soduku solver

class Solution {
private:

    bool isValid(vector<vector<char>> &board, int i, int j, char c){
        for(int k = 0; k < 9; k++){
            if(board[k][j] == c){
                return false;
            }
            if(board[i][k] == c){
                return false;
            }
            if(board[3 * (i / 3) + (k / 3)][3 * (j / 3) + (k % 3)] == c){
                return false;
            }
        }
        return true;
    }

    bool solve(vector<vector<char>> &board){
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[i].size(); j++){
                if(board[i][j] == '.'){
                    for(char x = '1'; x <= '9'; x++){
                        if(isValid(board, i, j, x)){
                            board[i][j] = x;
                            if(solve(board) == true){
                                return true;
                            }else{
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
