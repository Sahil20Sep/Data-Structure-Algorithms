                    (sum of two element is target)

class Solution {
public:
    
    vector<vector<int>> findPrimePairs(int n) {
        
        vector<bool> mark(n + 1, true);
        
        mark[0] = mark[1] = false;
        
        vector<int> ans;
        
        for(int start = 2; start <= n; start++){
            
            if(mark[start] == true){
                
                ans.push_back(start);
                
                for(int ers = start + start; ers <= n; ers += start){
                    
                    mark[ers] = false;
                    
                }
            }
        }
        
        int slow = 0, fast = ans.size() - 1;
        
        vector<vector<int>> store;
        
        while(slow <= fast){
            
            if(ans[slow] + ans[fast] < n){
                
                slow++;
                
            }else if(ans[slow] + ans[fast] > n){
                
                fast--;
                
            }else{
                
                store.push_back({ans[slow], ans[fast]});
                slow++;
                fast--;
                
            }
        }
        
        return store;
        
    }
};

----------------------------------------------------------------------------------------------------

                            (2sum)

class Solution {
public:
    vector<int> twoSum(vector<int>& arr, int target) {
        
        int n = arr.size();

        unordered_map<int, int> hash;

        for(int i = 0; i < n; i++){

            if(hash.find(target - arr[i]) != hash.end()){

                return {hash[target - arr[i]], i};

            }else{

                hash[arr[i]] = i;
            }
        }

        return {0, 0};

    }
};

------------------------------------------------------------------------------------------------------

                                          (3- sum)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& arr) {

        sort(arr.begin(), arr.end());
        
        int n = arr.size();

        set<vector<int>> ans;

        vector<int> store;

        for(int i = 0; i < n; i++){

            for(int j = i + 1; j < n; j++){

                for(int k = j + 1; k < n; k++){

                    if(arr[i] + arr[j] + arr[k] == 0){

                        store.push_back(arr[i]);
                        store.push_back(arr[j]);
                        store.push_back(arr[k]);

                        ans.insert(store);

                        store.clear();

                    }
                }
            }
        }

        vector<vector<int>> fi;

        for(auto it : ans){

            fi.push_back(it);

        }

        return fi;

    }
};

---------------------------

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& arr) {

        int n = arr.size();

        map<int, int> hash;

        for(auto it : arr){

            hash[it] += 1;

        }

        set<vector<int>> ms;

        vector<int> store;

        for(int i = 0; i < n; i++){

            hash[arr[i]]--;

            for(int j = i + 1; j < n; j++){

                hash[arr[j]]--;

                if(hash[0 - (arr[i] + arr[j])] > 0){

                    store.push_back(arr[i]);
                    store.push_back(arr[j]);
                    store.push_back(0 - (arr[i] + arr[j]));

                    sort(store.begin(), store.end());

                    ms.insert(store);

                    store.clear();

                }

                hash[arr[j]]++;

            }

            hash[arr[i]]++;

        }

        vector<vector<int>> ans;

        for(auto it : ms){

            ans.push_back(it);

        }

        return ans;

    }
};

----------------

time --> O(N2);

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& arr) {

        sort(arr.begin(), arr.end());

        int n = arr.size();

        vector<vector<int>> ans;

        for(int i = 0; i < n - 2; i++){

            if(i == 0 || (i > 0 && arr[i] != arr[i - 1])){

                int slow = i + 1, fast = n - 1;
                int sum = -arr[i];

                while(slow < fast){

                    if(arr[slow] + arr[fast] == sum){

                        ans.push_back({arr[i], arr[slow], arr[fast]});

                        while(slow < fast && arr[slow] == arr[slow + 1]){

                            slow++;

                        }

                        while(slow < fast && arr[fast] == arr[fast - 1]){

                            fast--;

                        }

                        slow++; fast--;

                    }else if(arr[slow] + arr[fast] < sum){

                        slow++;

                    }else{
                        
                        fast--;

                    }
                }
            }
        }

        return ans;

    }
};

------------------------------------------------------------------------------------------------------------

                                        (remove duplicate)

class Solution {
public:
    int removeDuplicates(vector<int>& arr) {
        
        int n = arr.size();

        if(n == 1){

            return 1;

        }

        int slow = 0, fast = 1;

        while(fast < n){

            if(arr[slow] == arr[fast]){

                fast++;

            }else{

                slow++;
                arr[slow] = arr[fast];
                fast++;

            }

        }

        return slow + 1;

    }
};

------------------------------------------------------------------------------------------------

                    (cnt maximum consicutive one)

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& arr) {
        
        int n = arr.size(), ans = 0, cnt = 0;

        for(int i = 0; i < n; i++){

            arr[i] ? cnt++ : cnt = 0;
 
            if(cnt > ans){

                ans = cnt;
                
            }
        }

        return ans;

    }
};

--------------------------------------------------------------------------------------------------

                          (4sum)

brute force is N^4;

then tell N^3 * Log(N) -->> three pointer + binary search

then tell N^3;

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& arr, int target) {
        
        int n = arr.size();

        sort(arr.begin(), arr.end());

        vector<vector<int>> ans;

        for(int i = 0; i < n - 3; i++){

            if(i == 0 || (i > 0 && arr[i] != arr[i - 1])){

                for(int j = i + 1; j < n - 2; j++){

                    if(j == i + 1 || (j > i + 1 && arr[j] != arr[j - 1])){

                        int slow = j + 1, fast = n - 1;
                        long long need = (long long)target - (long long)arr[i] - (long long)arr[j];

                        while(slow < fast){

                            if(arr[slow] + arr[fast] == need){

                                ans.push_back({arr[i], arr[j], arr[slow], arr[fast]});

                                while(slow < fast && arr[slow] == arr[slow + 1]){

                                    slow++;

                                }

                                while(slow < fast && arr[fast] == arr[fast - 1]){

                                    fast--;

                                }

                                slow++; fast--;

                            }else if(arr[slow] + arr[fast] < need){

                                slow++;

                            }else{
                                
                                fast--;

                            }
                        }
                    }
                }
            }
        }

        return ans;

    }
};

----------------------------------------------------------------------------------------------------------------

                                            (4sum - II)

class Solution {
public:
    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {
        
        unordered_map<int, int> hash;

        for(auto i : nums1){

            for(auto j : nums2){

                hash[i + j]++;

            }
        }

        int ans = 0;

        for(auto i : nums3){

            for(auto j : nums4){

                ans += hash[-(i + j)];

            }
        }

        return ans;

    }
};

------------------------------------------------------------------------------------------------------------------

                (reverse pair)

first is brute force which is O(N^2).

class Solution {
public:
    int reversePairs(vector<int>& nums) {
        
        int n = nums.size(), ans = 0;

        for(int i = 0; i < n - 1; i++){

            for(int j = i + 1; j < n; j++){

                if((long long)nums[i] > (long long)nums[j] * 2LL){

                    ans++;

                }
            }
        }

        return ans;

    }
};

----------------

------------------------------------------------------------------------------------------------------------------

                      (sliding window --> Max Consecutive Ones III)

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        
        // sliding window algorithm

        int n = nums.size();

        int slide_start = 0, slide_end = 0, ans = 0, CountZero = 0;

        while(slide_end < n){

            if(nums[slide_end] == 0){

                CountZero++;

                while(CountZero > k){

                    if(nums[slide_start] == 0){
                        CountZero--;
                    }

                    slide_start++;

                }

            }

            ans = max(ans, slide_end - slide_start + 1);

            slide_end++;
        }

        return ans;

    }
};

------------------------------------------------------------------------------------------

                          (substring without reapeting same character)

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        unordered_map<char, int> hash;

        int n = s.size();

        int slide_start = 0, slide_end = 0, ans = 0;

        while(slide_end < n){

            hash[s[slide_end]]++;

            while(hash[s[slide_end]] > 1){

                hash[s[slide_start]]--;
                slide_start++;

            }

            ans = max(ans, slide_end - slide_start + 1);

            slide_end++;
        }

        return ans;

    }
};

----------------

          (optimize)

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        unordered_map<char, int> hash;

        int n = s.size();

        int slide_start = 0, slide_end = 0, ans = 0;

        while(slide_end < n){

            if(hash.find(s[slide_end]) != hash.end()){

                if( hash[s[slide_end]] + 1 > slide_start){
                    slide_start = hash[s[slide_end]] + 1;
                }

            }

            hash[s[slide_end]] = slide_end;

            ans = max(ans, slide_end - slide_start + 1);

            slide_end++;
        }

        return ans;

    }
};








