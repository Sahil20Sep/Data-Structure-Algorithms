and , or, xor

xor --> even 1 xor become --> 0
        odd 1 xor become --> 1

~ flip the bits

>> (10 >> 2) --> (1010) --> (0010)

means devision by 2 twice (by right shift by 2)

<< (5 << 2) --> (00000000....101) --> (00000....10100)

means multiply by 2 twice (by left shift by 2)

------------------------------------------------------------------------

xor property is 

any same two elemment xor == 0

swap property --> swap two number by xor

a = a xor b, b = a xor b, a = a xor b 

------------------------------------------------------------------------

one element appear twice ok so, take all arr xor and xor is answer

-------------------------------------------------------------------------

xor of 1 ---> N

n % 4 == 0 --> print(n)

n % 4 == 1 --> print(1)

n % 4 == 2 --> print(n + 1)

n % 4 == 3 --> print(0) 

------------------------------------------------------------------------

now given range L --> R

take xor to 1 ---> R

take xor 1 --> L - 1

take this two xor

-----------------------------------------------------------------------

n & 1 == 1 --> odd else even

----------------------------------------------------------------------

given (N, i) check in N ith bit is set of not

1st way (N >> i) & 1

2nd way (1 << i) & N

(set or not)

---------------------------------------------------------------------

set the bit

(1 << i) | N

------------------------------------------------------------------

remove the bit

~(1 << i) & N

------------------------------------------------------------------

remove the last set bit

n & (n - 1)

---------------------------------------------------------------------

check N is power of 2 or not

n & (n -1) == 0 then N is power of 2

--------------------------------------------------------------------

count the number of set bit

n & (n - 1) != 0  --> cnt++;

---------------------------------------------------------------------

two element are apper 1 time and other are 2 time

class Solution {
public:
    vector<int> singleNumber(vector<int>& arr) {
        
        int n = arr.size();
        int all = 0;
        for(int i = 0; i < n; i++){
            all ^= arr[i];
        }
        int cnt = 0;
        while(all){
            if(all & 1){
                break;
            }
            cnt++;
            all >>= 1;
        }
        int a = 0, b = 0;
        for(int i = 0; i < n; i++){
            if(arr[i] & (1 << cnt)){
                a ^= arr[i];
            }else{
                b ^= arr[i];
            }
        }
        return {a, b};
    }
};

-------------------------------------------------------------------------------------

power set algorithms

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);    
    ll T = 1;
    // cin >> T;
    while(T--){
        int n; cin >> n;
        vector<int> v(n);
        int sum = 0;
        for(int i = 0; i < n; i++){
            int a; cin >> a;
            v[i] = a;
            sum += v[i];
        }
        for(int i = 0; i < (1 << n); i++){
            int a = 0;
            for(int j = 0; j < n; j++){
                if(i & (1 << j)){
                    a += v[j];
                }else{
                    a -= v[j];
                }
            }
            // cout << a << " " << b << endl;
            if(a % 360 == 0){
                cy; goto sahil;
            }
        }
        cn;
        sahil:; 
    }
    return 0;
}

-------------------------------------------------------------------------------

implement set using bitmasking

N --> 0 to 64;

0000000000000000000000000000...000000000000000000000

add --> if(n == 5) set bit 5 = 1; (x | (1 << i))

00000000000000000000000000...000000000000000010000

remove --> reset(bit 5)  (x & ~(1 << i))

print whateven is 1 just print

-----------------------------------------------------------------------------

xor of all subset

always be zero because event element occurs 2 ^ (N - 1) time and even so

------------------------------------------------------------------------------

sum of xor of all subset

use recursion 

class Solution {
public:

    int func(int i, int ans, int n, vector<int> &arr){
        if(i == n){
            return ans;
        }
        int a = func(i + 1, ans ^ arr[i], n, arr);
        int b = func(i + 1, ans, n, arr);
        return a + b;
    }

    int subsetXORSum(vector<int>& arr) {
        
        int n = arr.size();
        return func(0, 0, n, arr);

    }
};

-------------

class Solution {
public:
    int subsetXORSum(vector<int>& arr) {
        
        int n = arr.size();
        int sum = 0;
        for(int i = 0; i < (1 << n); i++){
            int a = 0;
            for(int j = 0; j < n; j++){
                if(i & (1 << j)){
                    a ^= arr[j];
                }
            }
            sum += a;
        }
        return sum;
    }
};

---------------------------------------------------------------------------------------------------

                        (given arr and you need to create pair which has same element)

class Solution {
public:
    bool divideArray(vector<int>& arr) {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        for(int i = 0; i < n; i += 2){
            if(arr[i] ^ arr[i + 1]){
                return false;
            }
        }
        return true;
    }
};

------------------------------------------------------------------------------------------------------

                        (element appears thrice and only one element apperar once)

class Solution {
public:
    int singleNumber(vector<int>& arr) {
        int n = arr.size();
        int ans = 0;
        for(int i = 0; i < 32; i++){
            int sum = 0;
            for(auto it : arr){
                if(it & (1 << i)){
                    sum++;
                }
            }
            if(sum % 3 == 1){
                ans |= (1 << i);
            }
        }
        return ans;
    }
};

----------------------------------------------------------------------------------------------------------

                                2220. Minimum Bit Flips to Convert Number

class Solution {
public:
    int minBitFlips(int start, int goal) {
        int cnt = 0;
        for(int i = 31; i >= 0; i--){
            if(!(start & (1 << i)) != !(goal & (1 << i))){
                cnt++;
            }
        }
        return cnt;
    }
};

------------------------------------------------------------------------------------------------------------

                         1318. Minimum Flips to Make a OR b Equal to c


class Solution {
public:
    int minFlips(int a, int b, int c) {
        if((a | b) == c){
            return 0;
        }
        int cnt = 0;
        for(int i = 0; i <= 31; i++){
            bool r = c & (1 << i);
            bool aa = a & (1 << i);
            bool bb = b & (1 << i);
            if(r == 0){
                if(aa){
                    cnt++;
                }
                if(bb){
                    cnt++;
                }
            }else{
                if(aa || bb){

                }else{
                    cnt++;
                }
            }
        }
        return cnt;
    }
};

------------------------------------------------------------------------------------------------------------

                                2564. Substring XOR Queries


class Solution {
public:
    vector<vector<int>> substringXorQueries(string s, vector<vector<int>>& arr) {
        
        int n = s.size();
        cout << n << endl;
        unordered_map<int, pair<int, int>> hash;
        for(int i = n - 1; i >= 0; i--){
            int be = 0;
            int bit = 0;
            for(int j = i; j >= max(0, i - 31); j--){
                if(s[j] == '1'){
                    be += (1 << bit);
                }
                if(hash.find(be) != hash.end()){
                    int a = hash[be].first, b = hash[be].second;
                    if((i - j) > (b - a)){

                    }else if((i - j) < (b - a)){
                        hash[be] = {j, i};
                    }else{
                        if(j < a){
                            hash[be] = {j, i};
                        }
                    }
                }else{
                    hash[be] = {j, i};
                }
                bit++;
            }
        }
        vector<vector<int>> ans;
        for(auto it : arr){
            int a = it[0], b = it[1];
            int xr = a ^ b;
            if(hash.find(xr) != hash.end()){
                ans.push_back({hash[xr].first, hash[xr].second});
            }else{
                ans.push_back({-1, -1});
            }
        }
        return ans;
    }
};

------------------------------------------------------------------------------------------------------------




------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------






