Problem Statement

Let there be N workers and N jobs. Any worker can be assigned to perform any job, incurring some cost that may vary depending on the work-job assignment. It is required to perform all jobs by assigning exactly one worker to each job and exactly one job to each agent in such a way that the total cost of the assignment is minimized.

Input Format
Number of workers and job: N
Cost matrix C with dimension N*N where C(i,j) is the cost incurred on assigning ith Person to jth Job.

Sample Input
4

[
9 2 7 8
6 4 3 7
5 8 1 8
7 6 9 4
]

Sample Output
13

Constraints
N <= 20


int func(int i, int mask, int n, vector<vector<int>> &v, vector<vector<int>> &dp){
    if(i == n){
        return 0;
    }
    if(dp[i][mask] != -1){
        return dp[i][mask];
    }
    int ans = INT_MAX;
    for(int j = 0; j < n; j++){
        if(mask & (1 << j)){
            continue;
        }
        ans = min(ans, v[i][j] + func(i + 1, mask | (1 << j), n, v, dp));
    }
    return dp[i][mask] = ans;
}
 
//------------------------------------code------------------------------------//
 
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);    
    ll T = 1;
    // cin >> T;
    while(T--){
        int n; cin >> n;
        vector<vector<int>> v(n, vector<int> (n));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                cin >> v[i][j];
            }
        }
        vector<vector<int>> dp(n, vector<int> ((1 << n), -1));
        cout << func(0, 0, n, v, dp) << endl;
        sahil:; 
    }
    return 0;
}

-----------------------------------------------------------------------------------------------------------------------

                                (traveling salceman problem)


int func(int i, int mask, int n, vector<vector<int>> &v, vector<vector<int>> &dp){
    
    if(dp[i][mask] != -1){
        return dp[i][mask];
    }
    int ans = INT_MAX;
    for(int j = 0; j < n; j++){
        if(mask & (1 << j)){
            continue;
        }
        ans = min(ans, v[i][j] + func(j, mask | (1 << j), n, v, dp));
    }
    if(ans == INT_MAX){
        return dp[i][mask] = v[i][0];
    }
    return dp[i][mask] = ans;

}
 
//------------------------------------code------------------------------------//
 
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);    
    ll T = 1;
    // cin >> T;
    while(T--){
        int n; cin >> n;
        vector<vector<int>> v(n, vector<int> (n));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                cin >> v[i][j];
            }
        }
        vector<vector<int>> dp(n, vector<int> ((1 << n), -1));
        cout << func(0, 1, n, v, dp) << endl;
        sahil:; 
    }
    return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------

                (fish hunting)

double find(int num, int remove, int n, vector<vector<double>> &v){

    int k = __builtin_popcount(num);

    long long choice = k * (k - 1) / 2;

    double sum = 0;

    for(int i = 0; i < n; i++){

        if(num & (1 << i)){

            sum += (v[i][remove]);

        }

    }

    return sum / (double)choice;

}

double func(int num, int n, vector<double> &dp, vector<vector<double>> &v){

    int cnt = __builtin_popcount(num);

    // cout << num  << " " << cnt << endl;

    if(cnt == n){
        // cy;
        return 1;
    }

    if(dp[num] != -1){
        return dp[num];
    }

    double ans = 0;

    for(int i = 0; i < n; i++){

        if((num & (1 << i)) == 0){

            int pass = num | (1 << i);

            // cout << pass << " ";

            double set_probability = func(pass, n, dp, v);

            ans += set_probability * find(pass, i, n, v);

        }
    }

    // cout << num << " " << ans << endl;

    return dp[num] = ans;

}
 
//------------------------------------code------------------------------------//
 
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);    
    ll T = 1;
    // cin >> T;
    while(T--){
        int n; cin >> n;
        vector<vector<double>> v(n, vector<double> (n));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                cin >> v[i][j];
                // cout << v[i][j] << " ";
            }
            // cout << endl;
        }
        vector<double> dp((1 << n), -1);
        for(int i = 0; i < n; i++){
            cout << fixed << setprecision(6) << func((1 << i), n, dp, v) << " ";
        }
        sahil:; 
    }
    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------

long long func(int i, int mask, int n, vector<vector<bool>> &v, vector<vector<long long>> &dp){

    int k = __builtin_popcount(mask);

    if(n == k){
        // cy;
        return 1;
    }

    if(i > 100){
        return 0;
    }

    if(dp[i][mask] != -1){
        return dp[i][mask];
    }

    long long ans = 0;

    for(int j = 0; j < n; j++){

        if((mask & (1 << j)) == 0 && v[j][i] == true){

            ans = (ans + func(i + 1, mask | (1 << j), n, v, dp)) % mod;

        }

    }

    ans = (ans + func(i + 1, mask, n, v, dp)) % mod;

    // cout << i << " " << mask << " " << ans << endl;

    return dp[i][mask] = ans;

}
 
//------------------------------------code------------------------------------//
 
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);    
    ll T;
    cin >> T;
    while(T--){
        int n; cin >> n;
        cin.ignore();
        vector<vector<bool>> own(n, vector<bool> (101, false));
        for (int i = 0; i < n; i++) 
        {
            string line;
            getline(cin, line); // Read the entire line containing T-Shirt IDs

            stringstream ss(line);
            int id;
            while (ss >> id) 
            {
                own[i][id] = true; // Read the IDs of T-Shirts for this person
            }
        }
        vector<vector<long long>> dp(101, vector<long long> ((1 << n), -1));
        cout << func(1, 0, n, own, dp) << endl;
        sahil:; 
    }
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------

                        1879. Minimum XOR Sum of Two Arrays

class Solution {
public:

    int func(int i, int mask, int n, vector<int> &a, vector<int> &b, vector<vector<int>> &dp){
        if(i == n){
            return 0;
        }
        if(dp[i][mask] != -1){
            return dp[i][mask];
        }
        int xr = INT_MAX;
        for(int j = 0; j < n; j++){
            if((mask & (1 << j)) == 0){
                xr = min(xr, (a[i] ^ b[j]) + func(i + 1, mask | (1 << j), n, a, b, dp));
            }
        }
        return dp[i][mask] = xr;
    }

    int minimumXORSum(vector<int>& a, vector<int>& b) {
        int n = a.size();
        vector<vector<int>> dp(n, vector<int> (1 << n, -1));
        return func(0, 0, n, a, b, dp);
    }
};
