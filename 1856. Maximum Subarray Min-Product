class Solution {
public:

    const int mod = 1e9 + 7;

    int maxSumMinProduct(vector<int>& v) {
        int n = v.size();
        vector<long long> sum(n, 0);
        sum[0] = v[0];
        for(int i = 1; i < n; i++){
            sum[i] = sum[i - 1] + v[i];
        }
        vector<int> left(n, -1), right(n, n);
        stack<int> st;
        for(int i = 0; i < n; i++){
            while(!st.empty() && v[st.top()] >= v[i]){
                st.pop();
            }
            if(st.empty()){
                left[i] = -1;
            }else{
                left[i] = st.top();
            }
            st.push(i);
        }
        while(!st.empty()){
            st.pop();
        }
        for(int i = n - 1; i >= 0; i--){
            while(!st.empty() && v[st.top()] >= v[i]){
                st.pop();
            }
            if(st.empty()){
                right[i] = n;
            }else{
                right[i] = st.top();
            }
            st.push(i);
        }
        long long ans = 0;
        for(int i = 0; i < n; i++){
            long long a = 0;
            a += sum[right[i] - 1];
            if(left[i] >= 0){
                a -= sum[left[i]];
            }
            a *= v[i];
            ans = max(ans, a);
        }
        return ans % mod;
    }
};
