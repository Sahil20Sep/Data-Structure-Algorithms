linear data structure and made by collection of node

insertion and deletion is very easy rather than array and vector

------------------------------------------------------------------------

class

class Node{

    public: 

    int val;

    Node* next;

    Node(int val){

        this -> val = val;

        this -> next = NULL;

    }

};

---------------------------------------------------------------------------

display

void display(Node* &head){
    
    Node* temp = head;

    while(temp != NULL){

        cout << temp -> val << " -> "; 

        temp = temp -> next;
    }

    cout << "NULL" << endl;

}

---------------------------------------------------------------------------

insert at head

void insertAtHead(Node* &head, int val){

    Node* temp = new Node(val);

    temp -> next = head;

    head = temp;

}

--------------------------------------------------------------------------

insert at tail

void insertAtTail(Node* &head, int val){

    Node* temp = head;

    while(temp -> next != NULL){

        temp = temp -> next;

    }

    Node* d = new Node(val);

    temp -> next = d;

}

-----------direct using tail

void insertAtTail(Node* &tail, int val){

    Node* d = new Node(val);

    tail -> next = d;

    tail = d;

}

--------------------------------------------------------------------------

                (complete singlely link list)

// single link list

void insertAtHead(Node* &head, int val){

    Node* temp = new Node(val);

    temp -> next = head;

    head = temp;

}

void insertAtTail(Node* &head, int val){

    Node* temp = head;

    while(temp -> next != NULL){

        temp = temp -> next;

    }

    Node* d = new Node(val);

    temp -> next = d;

}

int Length_of_link_list(Node* &head){

    int len = 0;

    Node* temp = head;

    while(temp != NULL){

        len++;

        temp = temp -> next;

    }

    return len;

}

void insertAtMiddle(Node* &head, int pos, int val){

    if(pos == 1){

        insertAtHead(head, val);

        return ;
    }

    int len = Length_of_link_list(head);

    if(pos >= len + 1){

        insertAtTail(head, val);

        return;

    }

    Node* d = new Node(val);

    Node* temp = head;

    int cnt = 1;

    while(cnt < pos - 1){

        temp = temp -> next;

        cnt++;

    }

    d -> next = temp -> next;

    temp -> next = d;

}

void deleteAt(Node* &head, int pos){

    if(pos == 1){

        Node* temp = head;

        head = head -> next;

        temp -> next = NULL;

        delete temp;

        return; 
    }

    Node* temp = head;

    int cnt = 2;

    while(cnt < pos){

        temp = temp -> next;
        cnt++;

    }

    Node* dele = temp -> next;

    temp -> next = temp -> next -> next;

    dele -> next = NULL;

    delete dele;

}

--------------------------------------------------------------------------

                (complete doubly link list)

// double link list

void insertAtHead_doubly(Node* &head, int val){

    if(head == NULL){

        Node* temp = new Node(val);

        head = temp;

        return;

    }

    Node* temp = new Node(val);

    temp -> next = head;

    head -> prev = temp;

    head = temp;

}

void insertAtTail_doubly(Node* &head, int val){

    if(head == NULL){

        Node* temp = new Node(val);

        head = temp;

        return;

    }

    Node* temp = head;

    while(temp -> next != NULL){

        temp = temp -> next;

    }

    Node* d = new Node(val);

    temp -> next = d;

    d -> prev = temp;

}

void insertAtMiddle_doubly(Node* &head, int pos, int val){

    if(head == NULL){

        Node* temp = new Node(val);

        head = temp;

        return;

    }

    if(pos == 1){
        
        insertAtHead_doubly(head, val);

        return ;

    }

    int len = Length_of_link_list(head);

    if(pos >= len + 1){

        insertAtTail_doubly(head, val);

        return ;

    }

    int cnt = 2;

    Node* temp = head;

    while(cnt < pos){

        temp = temp -> next;
        cnt++;

    }

    Node* d = new Node(val);

    d -> next = temp -> next;

    temp -> next -> prev = d;

    temp -> next = d;

    d -> prev = temp;

}

void deleteAt_doubly(Node* &head, int pos){

    if(pos == 1){

        Node* temp = head;

        head = temp -> next;

        head -> prev = NULL;

        temp -> next = NULL;

        delete temp;

        return;

    }

    int len = Length_of_link_list(head);


    int cnt = 2;

    Node* temp = head;

    while(cnt < pos){

        temp = temp -> next;
        cnt++;
    }

    Node* d = temp -> next;

    if(pos >= len){

        temp -> next = NULL;

        d -> prev = NULL;

        delete d;

        return;

    }

    temp -> next = d -> next;

    d -> next -> prev = temp;

    d -> prev = NULL;

    d -> next = NULL;

    delete d;

}

--------------------------------------------------------------------------

                (reverse link list) - iterive

class Solution {
public:
    ListNode* reverseList(ListNode* head) {

        if(head == NULL){

            return NULL;

        }

        ListNode* prev = NULL;
        
        while(head != NULL){

            ListNode* temp = head -> next;

            head -> next = prev;

            prev = head;

            head = temp;

        }

        return prev;

    }
};


--------------------------------------------------------------------------

                    middle of list list

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        
        int len = 0;

        ListNode* temp = head;

        while(temp != NULL){

            temp = temp -> next;

            len++;

        }

        int need = (len >> 1) + 1;

        int cnt = 1;

        temp = head;

        while(cnt != need){

            temp = temp -> next;

            cnt++;

        }

        return temp;

    }
};

------------------optimal

slow and fast pointer

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        
        ListNode* slow = head;

        ListNode* fast = head;

        while(fast != NULL && fast -> next != NULL){

            slow = slow -> next;

            fast = fast -> next -> next;

        }

        return slow;

    }
};

--------------------------------------------------------------------------

detect cycle

also use of hash

class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        map<ListNode*, int> hash;

        ListNode* temp = head;

        while(temp != NULL){

            if(hash[temp] > 0){
                return true;
            }

            hash[temp]++;

            temp = temp -> next;

        }

        return false;

    }
};

-------

slow and fast pointer

class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        ListNode* slow = head;

        ListNode* fast = head;

        while(fast != NULL && fast -> next != NULL){

            slow = slow -> next;

            fast = fast -> next -> next;

            if(slow == fast){

                return true;

            }

        }

        return false;

    }
};

--------------------------------------------------------------------------

                which node index cycyle is started

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        map<ListNode*, bool> hash;

        ListNode* temp = head;

        int cnt = 0;

        while(temp != NULL){

            if(hash[temp] == true){

                return temp;

            }

            hash[temp] = true;

            temp = temp -> next;

        } 

        return NULL;
    }
};

-----------O(N) l1 = nc - l2 important

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        ListNode* slow = head;

        ListNode* fast = head;

        while(fast != NULL && fast -> next != NULL){

            slow = slow -> next;

            fast = fast -> next -> next;

            if(slow == fast){

                ListNode* start = head;

                while(start != slow){

                    start = start -> next;

                    slow = slow -> next;

                }

                return slow;

            }
        }

        return NULL;
    }
};

--------------------------------------------------------------------------

                    length of cycle

int countNodesinLoop(struct Node *head)
{
    map<Node*, int> hash;
    
    Node* temp = head;
    
    int cnt = 0;
    
    while(temp != NULL){
        
        if(hash.find(temp) != hash.end()){
            return cnt - hash[temp];
        }
        
        hash[temp] = cnt++;
        
        temp = temp -> next;
        
    }
    
    return 0;
}

------------

int countNodesinLoop(struct Node *head)
{
    Node* slow = head;
    
    Node* fast = head;
    
    while(fast != NULL && fast -> next != NULL){
        
        slow = slow -> next;
        
        fast = fast -> next -> next;
        
        if(slow == fast){
            
           int count = 1;
           
           while(slow -> next != fast){
               slow = slow -> next;
               count++;
           }
            
            return count;
        }
    }
    
    return 0;
}


--------------------------------------------------------------------------

                        (check palindrome) also use revese function

class Solution {
public:
    bool isPalindrome(ListNode* head) {

        if(head -> next == NULL){
            return true;
        }
        
        ListNode* slow = head;

        ListNode* fast = head;

        while(fast -> next != NULL && fast -> next -> next != NULL){

            slow = slow -> next;

            fast = fast -> next -> next;

        }

        ListNode* prev = NULL;

        ListNode* start = slow -> next;

        if(fast -> next == NULL){

            slow -> next = fast;

        }else{

            slow -> next = fast -> next;

        }

        while(start != NULL){

            ListNode* tt = start -> next;

            start -> next = prev;

            prev = start;

            start = tt;

        }

        ListNode* store = slow -> next;

        while(store != NULL){

            if(head -> val != store -> val){
                return false;
            }

            head = head -> next;
            store = store -> next;

        }

        return true;

    }
};

--------------------------------------------------------------------------

                        odd even link list

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {

        if(head == NULL || head -> next == NULL || head -> next -> next == NULL){
            return head;
        }
        
        int cnt = 1;

        ListNode* temp = head;

        ListNode* store = head -> next;

        while(temp -> next -> next != NULL){

            ListNode* ano = temp -> next;

            temp -> next = temp -> next -> next;

            temp = ano;

            cnt++;

        }

        if(cnt & 1){

            temp -> next = store;

            return head;
        }

        temp -> next -> next = store;

        temp -> next = NULL;

        return head;

    }
};

--------------------------------------------------------------------------

                        remove Nth node

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        int len = 0;

        ListNode* temp = head;

        while(temp != NULL){

            temp  = temp -> next;

            len++;

        }

        if(n == len){

            ListNode* store = head;

            head = head -> next;

            store -> next = NULL;

            return head;

        }

        int rem = len - n;

        int cnt = 1;

        temp = head;

        while(cnt < rem){

            temp = temp -> next;

            cnt++;

        }

        ListNode* store = temp -> next;

        temp -> next = store -> next;

        store -> next = NULL;

        return head;

    }
};

------------


class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        
        ListNode* start = new ListNode();

        start -> next = head;

        ListNode* slow = start;

        ListNode* fast = start;

        for(int i = 1; i <= n; i++){
            fast = fast -> next;
        }

        while(fast -> next != NULL){

            slow = slow -> next;
            fast = fast -> next;

        }

        slow -> next = slow -> next -> next;

        return start -> next;

    }
};

--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



--------------------------------------------------------------------------



